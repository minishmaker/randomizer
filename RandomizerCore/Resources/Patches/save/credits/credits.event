#include "strings.event"

//hold R on credits for 8x speed, press A to skip page, press Start to skip credits
PUSH; ORG $A2EF8; jumpToHack(creditsFlow1); POP //also controls stats screen
ALIGN 4
creditsFlow1:
#incbin "asm/creditsFlow1.dmp"
POIN statPages
PUSH; ORG $A301C; jumpToHack(creditsFlow2); POP
ALIGN 4
creditsFlow2:
#incbin "asm/creditsFlow2.dmp"
PUSH; ORG $A3080; jumpToHack(creditsFlow3); POP
ALIGN 4
creditsFlow3:
#incbin "asm/creditsFlow3.dmp"

//change text colors and screen possition for the credits
PUSH; ORG $A316C; jumpToHack(customCredits); POP
ALIGN 4
customCredits:
#incbin "asm/customCredits.dmp"

ALIGN 4
statPages:
POIN itemCollectionPage
POIN enemyPage
POIN itemPage
POIN miscPage
WORD 0 //terminator

ALIGN 4
itemCollectionPage:
#incbin "asm/itemCollectionPage.dmp"
POIN collectionPageData
POIN collectionPageGraphics
POIN collectionPagePalette
POIN collectionPageBigGraphics
POIN collectionPageBackgroundGraphics
POIN collectionPageBackgroundPalette

ALIGN 4
collectionPageData:
//SHORT itemID baseTileLayer1 baseTileLayer2; BYTE X Y; WORD
SHORT 0x01 (04<<12)|(01*9) (0<<12)|(00*9); BYTE 01 04; SHORT (6<<12)|(01*9) (0<<12)|(00*9) //smith's sword
SHORT 0x02 (02<<12)|(02*9) (0<<12)|(00*9); BYTE 01 04; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //white sword 1
SHORT 0x03 (00<<12)|(02*9) (0<<12)|(00*9); BYTE 01 04; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //white sword 2
SHORT 0x04 (01<<12)|(02*9) (0<<12)|(00*9); BYTE 01 04; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //white sword 3
SHORT 0x06 (04<<12)|(03*9) (0<<12)|(04*9); BYTE 01 04; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //four sword
SHORT 0x11 (01<<12)|(14*9) (0<<12)|(00*9); BYTE 04 04; SHORT (6<<12)|(14*9) (0<<12)|(00*9) //gust jar
SHORT 0x12 (04<<12)|(15*9) (0<<12)|(00*9); BYTE 07 04; SHORT (6<<12)|(15*9) (0<<12)|(00*9) //cane of pacci
SHORT 0x0B (00<<12)|(09*9) (0<<12)|(00*9); BYTE 10 04; SHORT (6<<12)|(09*9) (0<<12)|(00*9) //boomerang
SHORT 0x0C (00<<12)|(10*9) (0<<12)|(00*9); BYTE 10 04; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //magic boomerang

SHORT 0x0D (01<<12)|(11*9) (0<<12)|(00*9); BYTE 01 07; SHORT (6<<12)|(11*9) (0<<12)|(00*9) //small shield
SHORT 0x0E (01<<12)|(12*9) (0<<12)|(00*9); BYTE 01 07; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //mirror shield
SHORT 0x13 (01<<12)|(16*9) (0<<12)|(00*9); BYTE 04 07; SHORT (6<<12)|(16*9) (0<<12)|(00*9) //mole mitts
SHORT 0x0F (00<<12)|(13*9) (0<<12)|(00*9); BYTE 07 07; SHORT (6<<12)|(13*9) (0<<12)|(00*9) //lantern
SHORT 0x10 (00<<12)|(13*9) (0<<12)|(00*9); BYTE 07 07; SHORT (6<<12)|(13*9) (0<<12)|(00*9) //lantern
SHORT 0x0F (00<<12)|(13*9) (0<<12)|(00*9); BYTE 07 07; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //lantern
SHORT 0x10 (00<<12)|(13*9) (0<<12)|(00*9); BYTE 07 07; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //lantern
SHORT 0x07 (01<<12)|(05*9) (0<<12)|(00*9); BYTE 10 07; SHORT (6<<12)|(05*9) (0<<12)|(00*9) //bombs
SHORT 0x08 (00<<12)|(06*9) (0<<12)|(00*9); BYTE 10 07; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //remote bombs

SHORT 0x15 (01<<12)|(18*9) (0<<12)|(00*9); BYTE 01 10; SHORT (6<<12)|(18*9) (0<<12)|(00*9) //pegasus boots
SHORT 0x14 (01<<12)|(17*9) (0<<12)|(00*9); BYTE 04 10; SHORT (6<<12)|(17*9) (0<<12)|(00*9) //roc's cape
SHORT 0x17 (01<<12)|(19*9) (0<<12)|(00*9); BYTE 07 10; SHORT (6<<12)|(19*9) (0<<12)|(00*9) //ocarina
SHORT 0x09 (01<<12)|(07*9) (0<<12)|(00*9); BYTE 10 10; SHORT (6<<12)|(07*9) (0<<12)|(00*9) //bow
SHORT 0x0A (01<<12)|(08*9) (0<<12)|(00*9); BYTE 10 10; SHORT (0<<12)|(00*9) (0<<12)|(00*9) //light arrows

SHORT 0x1C (01<<12)|(20*9) (0<<12)|(00*9); BYTE 01 13; SHORT (6<<12)|(20*9) (0<<12)|(00*9) //bottle
SHORT 0x1D (01<<12)|(20*9) (0<<12)|(00*9); BYTE 04 13; SHORT (6<<12)|(20*9) (0<<12)|(00*9) //bottle
SHORT 0x1E (01<<12)|(20*9) (0<<12)|(00*9); BYTE 07 13; SHORT (6<<12)|(20*9) (0<<12)|(00*9) //bottle
SHORT 0x1F (01<<12)|(20*9) (0<<12)|(00*9); BYTE 10 13; SHORT (6<<12)|(20*9) (0<<12)|(00*9) //bottle

SHORT 0x36 (01<<12)|(42*9) (0<<12)|(00*9); BYTE 03 16; SHORT (6<<12)|(42*9) (0<<12)|(00*9) //bottle of dog food
SHORT 0x37 (01<<12)|(28*9) (0<<12)|(00*9); BYTE 06 16; SHORT (6<<12)|(28*9) (0<<12)|(00*9) //spare key
SHORT 0x38 (04<<12)|(25*9) (0<<12)|(26*9); BYTE 09 16; SHORT (6<<12)|(25*9) (6<<12)|(26*9) //wake-up mushroom
SHORT 0x39 (00<<12)|(21*9) (0<<12)|(00*9); BYTE 12 16; SHORT (6<<12)|(21*9) (0<<12)|(00*9) //red book
SHORT 0x3A (02<<12)|(22*9) (4<<12)|(24*9); BYTE 15 16; SHORT (6<<12)|(22*9) (6<<12)|(24*9) //green book
SHORT 0x3B (01<<12)|(23*9) (0<<12)|(00*9); BYTE 18 16; SHORT (6<<12)|(23*9) (0<<12)|(00*9) //blue book
SHORT 0x3C (04<<12)|(27*9) (0<<12)|(00*9); BYTE 21 16; SHORT (6<<12)|(27*9) (0<<12)|(00*9) //graveyard key
SHORT 0x5B (00<<12)|(43*9) (2<<12)|(44*9); BYTE 24 16; SHORT (6<<12)|(43*9) (6<<12)|(44*9) //jabber nut

SHORT 0x44 (04<<12)|(29*9) (0<<12)|(30*9); BYTE 20 11; SHORT (6<<12)|(29*9) (6<<12)|(30*9) //grip ring
SHORT 0x45 (04<<12)|(31*9) (0<<12)|(00*9); BYTE 23 11; SHORT (6<<12)|(31*9) (0<<12)|(00*9) //power bracelets
SHORT 0x46 (01<<12)|(32*9) (0<<12)|(00*9); BYTE 27 11; SHORT (6<<12)|(32*9) (0<<12)|(00*9) //flippers

SHORT 0x40 (05<<12)|(33*9) (0<<12)|(00*9); BYTE 23 05; SHORT (6<<12)|(33*9) (0<<12)|(00*9) //earth element
SHORT 0x41 (00<<12)|(34*9) (0<<12)|(00*9); BYTE 20 06; SHORT (7<<12)|(34*9) (0<<12)|(00*9) //fire element
SHORT 0x42 (01<<12)|(35*9) (0<<12)|(00*9); BYTE 26 06; SHORT (6<<12)|(35*9) (0<<12)|(00*9) //water element
SHORT 0x43 (02<<12)|(36*9) (0<<12)|(00*9); BYTE 23 08; SHORT (6<<12)|(36*9) (0<<12)|(00*9) //wind element

SHORT 0x48 (08<<12)|(38*9) (0<<12)|(00*9); BYTE 13 00; SHORT (6<<12)|(38*9) (0<<12)|(00*9) //Spin Attack
SHORT 0x49 (09<<12)|(39*9) (0<<12)|(00*9); BYTE 14 00; SHORT (6<<12)|(39*9) (0<<12)|(00*9) //Roll Attack
SHORT 0x4A (08<<12)|(38*9) (0<<12)|(00*9); BYTE 16 00; SHORT (6<<12)|(38*9) (0<<12)|(00*9) //Dash Attack
SHORT 0x4B (08<<12)|(39*9) (0<<12)|(00*9); BYTE 17 00; SHORT (6<<12)|(39*9) (0<<12)|(00*9) //Rock Breaker
SHORT 0x4C (10<<12)|(38*9) (0<<12)|(00*9); BYTE 19 00; SHORT (6<<12)|(38*9) (0<<12)|(00*9) //Sword Beam
SHORT 0x4D (11<<12)|(39*9) (0<<12)|(00*9); BYTE 20 00; SHORT (6<<12)|(39*9) (0<<12)|(00*9) //Great Spin Attack
SHORT 0x4E (08<<12)|(38*9) (0<<12)|(00*9); BYTE 22 00; SHORT (6<<12)|(38*9) (0<<12)|(00*9) //Down Thrust
SHORT 0x4F (12<<12)|(39*9) (0<<12)|(00*9); BYTE 23 00; SHORT (6<<12)|(39*9) (0<<12)|(00*9) //Peril Beam
SHORT 0x73 (08<<12)|(38*9) (0<<12)|(00*9); BYTE 25 00; SHORT (6<<12)|(38*9) (0<<12)|(00*9) //Fast Spin
SHORT 0x74 (08<<12)|(39*9) (0<<12)|(00*9); BYTE 26 00; SHORT (6<<12)|(39*9) (0<<12)|(00*9) //Fast Split
SHORT 0x75 (08<<12)|(38*9) (0<<12)|(00*9); BYTE 28 00; SHORT (6<<12)|(38*9) (0<<12)|(00*9) //Longer Great Spin
SHORT 0 0 0 0 //terminator

ALIGN 4
scrollingPage:
#incbin "asm/scrollingPage.dmp"
POIN bgscrollbotImage
POIN bgscrollbotPalette
POIN bgscrolltopImage
POIN bgscrolltopPalette
POIN bgscrolltopscroll
POIN debugFontCredits

ALIGN 4
enemyPage:
#incbin "asm/enemyPage.dmp"
POIN killsPageData
POIN scrollingPage
POIN drawText
POIN drawNumber
POIN drawTime
POIN getTextOffset
POIN killCredits1
POIN killCredits2
POIN notDefeatedCredits
POIN defeatedCredits
POIN NACredits
POIN killCredits3
POIN highCredits

ALIGN 4
itemPage:
#incbin "asm/itemPage.dmp"
POIN itemsPageData
POIN scrollingPage
POIN drawText
POIN drawNumber
POIN drawTime
POIN getTextOffset
POIN neverCredits
POIN NACredits
POIN timesUsedCredits
POIN timeFoundCredits
POIN highCredits

ALIGN 4
miscPage:
#incbin "asm/miscPage.dmp"
POIN miscPageData
POIN scrollingPage
POIN drawText
POIN drawNumber
POIN drawTime
POIN highCredits
POIN timesCredits
POIN timeCredits

ALIGN 4
collectionPageGraphics:
#incbin "items.img.bin"

ALIGN 4
collectionPageBigGraphics:
#incbin "bigitems.img.bin"

ALIGN 4
collectionPagePalette:
#incbin "items.pal.bin"

ALIGN 4
collectionPageBackgroundGraphics:
#incbin "bgitems.img.bin"

ALIGN 4
collectionPageBackgroundPalette:
#incbin "bgitems.pal.bin"

ALIGN 4
bgscrollbotImage:
#incbin "bgscrollbot.img.bin"

ALIGN 4
bgscrollbotPalette:
#incbin "bgscrollbot.pal.bin"

ALIGN 4
bgscrolltopImage:
#incbin "bgscrolltop.img.bin"

ALIGN 4
bgscrolltopPalette:
#incbin "bgscrolltop.pal.bin"

ALIGN 4
bgscrolltopscroll:
#incbin "bgscrolltopscroll.img.bin"

ALIGN 4
killsPageData:
//POIN string OR SHORT 0 textID; WORD offsetToCounter (0 = 0 if time is 0, 1 otherwise) offsetToTime
SHORT 0x0000 0x0888; WORD 0 0x203FBE0+(4*7) //Vaati
SHORT 0x0000 0x087F; WORD 0 0x203FBE0+(4*0) //Big green chu
SHORT 0x0000 0x0882; WORD 0 0x203FBE0+(4*5) //Big blue chu
SHORT 0x0000 0x0880; WORD 0 0x203FBE0+(4*1) //Gleerok
SHORT 0x0000 0x0881; WORD 0 0x203FBE0+(4*2) //Mazaal
POIN octoCredits   ; WORD 0 0x203FBE0+(4*3) //Octo
SHORT 0x0000 0x087D; WORD 0 0x203FBE0+(4*4) //Gyorg pair
SHORT 0x0000 0x087A; WORD 0x203FB00+(2*14) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*14) //Madderpillar
SHORT 0x0000 0x086E; WORD 0x203FB00+(2*00) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*00) //Octorok
SHORT 0x0000 0x0876; WORD 0x203FB00+(2*01) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*01) //Chuchu
SHORT 0x0000 0x0879; WORD 0x203FB00+(2*02) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*02) //Leever
SHORT 0x0000 0x0857; WORD 0x203FB00+(2*03) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*03) //Peahat
SHORT 0x0000 0x0851; WORD 0x203FB00+(2*04) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*04) //Darknut
SHORT 0x0000 0x0875; WORD 0x203FB00+(2*05) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*05) //Beetle
SHORT 0x0000 0x084B; WORD 0x203FB00+(2*06) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*06) //Keese
SHORT 0x0000 0x0856; WORD 0x203FB00+(2*36) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*36) //Door Mimic
SHORT 0x0000 0x0855; WORD 0x203FB00+(2*07) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*07) //Moldorm
SHORT 0x0000 0x0846; WORD 0x203FB00+(2*08) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*08) //Moldworm
SHORT 0x0000 0x0844; WORD 0x203FB00+(2*09) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*09) //Sluggula
SHORT 0x0000 0x0868; WORD 0x203FB00+(2*10) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*10) //Pesto
SHORT 0x0000 0x0869; WORD 0x203FB00+(2*11) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*11) //Puffstool
SHORT 0x0000 0x085E; WORD 0x203FB00+(2*12) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*12) //Like Like
POIN moblinCredits ; WORD 0x203FB00+(2*13) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*13) //Moblin
POIN masterCredits ; WORD 0x203FB00+(2*15) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*15) //Wallmaster
SHORT 0x0000 0x0847; WORD 0x203FB00+(2*16) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*16) //Spiked Beetle
SHORT 0x0000 0x0858; WORD 0x203FB00+(2*17) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*17) //Helmasaur
SHORT 0x0000 0x085C; WORD 0x203FB00+(2*18) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*18) //Bob-omb
SHORT 0x0000 0x0877; WORD 0x203FB00+(2*19) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*19) //Tektite
SHORT 0x0000 0x086A; WORD 0x203FB00+(2*20) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*20) //Wizzrobe
SHORT 0x0000 0x084A; WORD 0x203FB00+(2*21) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*21) //Armos
SHORT 0x0000 0x0848; WORD 0x203FB00+(2*22) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*22) //Eyegore
SHORT 0x0000 0x0860; WORD 0x203FB00+(2*23) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*23) //Rope
SHORT 0x0000 0x085B; WORD 0x203FB00+(2*24) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*24) //Acro-Bandits
SHORT 0x0000 0x084C; WORD 0x203FB00+(2*25) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*25) //Keaton
POIN crowCredits   ; WORD 0x203FB00+(2*26) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*26) //Crow
SHORT 0x0000 0x0867; WORD 0x203FB00+(2*27) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*27) //Mulldozer
SHORT 0x0000 0x0863; WORD 0x203FB00+(2*29) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*29) //Spiny Beetle
POIN gibdoCredits  ; WORD 0x203FB00+(2*30) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*30) //Gibdo
SHORT 0x0000 0x0866; WORD 0x203FB00+(2*31) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*31) //Cloud Piranha
SHORT 0x0000 0x0845; WORD 0x203FB00+(2*32) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*32) //Scissors Beetle
SHORT 0x0000 0x0873; WORD 0x203FB00+(2*33) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*33) //Lakitu
POIN chainCredits  ; WORD 0x203FB00+(2*34) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*34) //Ball and Chain Soldier
SHORT 0x0000 0x084D; WORD 0x203FB00+(2*35) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*35) //Ghini
SHORT 0x0000 0x086D; WORD 0x203FB00+(2*28) ((0x203FB00+(0x25*2)+3)&(0xFFFFFFFC))+(4*28) //Bubble
WORD 0 0 0 //terminator

ALIGN 4
itemsPageData:
//POIN string OR SHORT 0 textID; WORD offsetToCounter (0 if not aplicable or quest item) offsetToTime
SHORT 0 0x0401            ; WORD (0x203FC00+(0x34*4)+(0x00*2)) 0x203FC00+(0x00*4) //Smith's Sword
POIN sword1Credits        ; WORD (0x203FC00+(0x34*4)+(0x01*2)) 0x203FC00+(0x01*4) //White Sword
POIN sword2Credits        ; WORD (0x203FC00+(0x34*4)+(0x02*2)) 0x203FC00+(0x02*4) //White Sword 2
POIN sword3Credits        ; WORD (0x203FC00+(0x34*4)+(0x03*2)) 0x203FC00+(0x03*4) //White Sword 3
SHORT 0 0x0406            ; WORD (0x203FC00+(0x34*4)+(0x04*2)) 0x203FC00+(0x04*4) //Four Sword
SHORT 0 0x0407            ; WORD (0x203FC00+(0x34*4)+(0x05*2)) 0x203FC00+(0x05*4) //Bombs
SHORT 0 0x0408            ; WORD (0x203FC00+(0x34*4)+(0x06*2)) 0x203FC00+(0x06*4) //Remote Bombs
SHORT 0 0x0409            ; WORD (0x203FC00+(0x34*4)+(0x07*2)) 0x203FC00+(0x07*4) //Bow
SHORT 0 0x040A            ; WORD (0x203FC00+(0x34*4)+(0x08*2)) 0x203FC00+(0x08*4) //Light Arrows
SHORT 0 0x040B            ; WORD (0x203FC00+(0x34*4)+(0x09*2)) 0x203FC00+(0x09*4) //Boomerang
SHORT 0 0x040C            ; WORD (0x203FC00+(0x34*4)+(0x0A*2)) 0x203FC00+(0x0A*4) //Magic Boomerang
SHORT 0 0x040D            ; WORD (0x203FC00+(0x34*4)+(0x0B*2)) 0x203FC00+(0x0B*4) //Shield
SHORT 0 0x040E            ; WORD (0x203FC00+(0x34*4)+(0x0C*2)) 0x203FC00+(0x0C*4) //Mirror Shield
SHORT 0 0x040F            ; WORD (0x203FC00+(0x34*4)+(0x0D*2)) 0x203FC00+(0x0D*4) //Lantern
SHORT 0 0x0411            ; WORD (0x203FC00+(0x34*4)+(0x0E*2)) 0x203FC00+(0x0E*4) //Gust Jar
SHORT 0 0x0412            ; WORD (0x203FC00+(0x34*4)+(0x0F*2)) 0x203FC00+(0x0F*4) //Cane of Pacci
SHORT 0 0x0413            ; WORD (0x203FC00+(0x34*4)+(0x10*2)) 0x203FC00+(0x10*4) //Mole Mitts
SHORT 0 0x0414            ; WORD (0x203FC00+(0x34*4)+(0x11*2)) 0x203FC00+(0x11*4) //Roc's Cape
SHORT 0 0x0415            ; WORD (0x203FC00+(0x34*4)+(0x12*2)) 0x203FC00+(0x12*4) //Pegasus Boots
SHORT 0 0x0417            ; WORD (0x203FC00+(0x34*4)+(0x13*2)) 0x203FC00+(0x13*4) //Ocarina
POIN bottleCredits        ; WORD (0x203FC00+(0x34*4)+(0x14*2)) 0x203FC00+(0x14*4) //Bottle
POIN dogCredits           ; WORD 0                             0x203FC00+(0x15*4) //Bottle of Dog Food
SHORT 0 0x0437            ; WORD 0                             0x203FC00+(0x16*4) //Lon Lon Ranch Key
SHORT 0 0x0438            ; WORD 0                             0x203FC00+(0x17*4) //Wake-Up Mushroom
POIN book1Credits         ; WORD 0                             0x203FC00+(0x18*4) //A Hyrulean Bestiary
POIN book2Credits         ; WORD 0                             0x203FC00+(0x19*4) //Legend of the Picori
POIN book3Credits         ; WORD 0                             0x203FC00+(0x1A*4) //A History of Masks
SHORT 0 0x043C            ; WORD 0                             0x203FC00+(0x1B*4) //Graveyard Key
SHORT 0 0x043D            ; WORD 0                             0x203FC00+(0x1C*4) //Tingle Trophy
POIN carlovCredits        ; WORD 0                             0x203FC00+(0x1D*4) //Carlov Medal
SHORT 0 0x0440            ; WORD 0                             0x203FC00+(0x1E*4) //Earth Element
SHORT 0 0x0441            ; WORD 0                             0x203FC00+(0x1F*4) //Fire Element
SHORT 0 0x0442            ; WORD 0                             0x203FC00+(0x20*4) //Water Element
SHORT 0 0x0443            ; WORD 0                             0x203FC00+(0x21*4) //Wind Element
SHORT 0 0x0444            ; WORD 0                             0x203FC00+(0x22*4) //Grip Ring
SHORT 0 0x0445            ; WORD 0                             0x203FC00+(0x23*4) //Power Bracelets
SHORT 0 0x0446            ; WORD 0                             0x203FC00+(0x24*4) //Flippers
SHORT 0 0x0448            ; WORD 0                             0x203FC00+(0x25*4) //Spin Attack
SHORT 0 0x0449            ; WORD 0                             0x203FC00+(0x26*4) //Roll Attack
SHORT 0 0x044A            ; WORD 0                             0x203FC00+(0x27*4) //Dash Attack
SHORT 0 0x044B            ; WORD 0                             0x203FC00+(0x28*4) //Rock Breaker
SHORT 0 0x044C            ; WORD 0                             0x203FC00+(0x29*4) //Sword Beam
SHORT 0 0x044D            ; WORD 0                             0x203FC00+(0x2A*4) //Great Spin Attack
SHORT 0 0x044E            ; WORD 0                             0x203FC00+(0x2B*4) //Down Thrust
SHORT 0 0x044F            ; WORD 0                             0x203FC00+(0x2C*4) //Peril Beam
SHORT 0 0x045B            ; WORD 0                             0x203FC00+(0x2D*4) //Jabber Nut
POIN shootbutterflyCredits; WORD 0                             0x203FC00+(0x2E*4) //Joy Butterfly (Shoot)
POIN digbutterflyCredits  ; WORD 0                             0x203FC00+(0x2F*4) //Joy Butterfly (Dig)
POIN swimbutterflyCredits ; WORD 0                             0x203FC00+(0x30*4) //Joy Butterfly (Swim)
POIN fastspinCredits      ; WORD 0                             0x203FC00+(0x31*4) //Fast Spin
POIN fastsplitCredits     ; WORD 0                             0x203FC00+(0x32*4) //Fast Split
POIN longspinCredits      ; WORD 0                             0x203FC00+(0x33*4) //Long Great Spin
WORD 0 0 0 //terminator

ALIGN 4
miscPageData:
//POIN string; WORD offsetToCounter offsetToTime (only one of the two)
POIN totalTimeCredits     ; WORD 0 0x203FFF0+(00*4)
POIN menuTimeCredits      ; WORD 0 0x203FFF0+(01*4)
POIN cutsceneTimeCredits  ; WORD 0 0x203FFF0+(02*4)
POIN rollingTimeCredits   ; WORD 0 0x203FFF0+(03*4)
POIN timesRolledCredits   ; WORD 0x203FE00+(00*2) 0
POIN timesBonkedCredits   ; WORD 0x203FE00+(01*2) 0
POIN timesDiedCredits     ; WORD 0x203FE00+(02*2) 0
POIN timesRevivedCredits  ; WORD 0x203FE00+(03*2) 0
POIN timesSavedCredits    ; WORD 0x203FE00+(04*2) 0
POIN timesLoadedCredits   ; WORD 0x203FE00+(05*2) 0
POIN timesWarpedCredits   ; WORD 0x203FE00+(07*2) 0
POIN timesHomesickCredits ; WORD 0x203FE00+(09*2) 0
POIN totalRupeesCredits   ; WORD 0x203FE00+(06*2) 0
POIN trapsSprungCredits   ; WORD 0x203FE00+(08*2) 0
WORD 0 0 0 //terminator

PUSH
//remove the palette for the background image, essentially making it a black background
ORG $5B52B0
WORD 0 0 0 0 0 0 0 0
WORD 0 0 0 0 0 0 0 0
WORD 0 0 0 0 0 0 0 0
WORD 0 0 0 0 0 0 0 0
WORD 0 0 0 0 0 0 0 0
WORD 0 0 0 0 0 0 0 0
WORD 0 0 0 0 0 0 0 0
WORD 0 0 0 0 0 0 0 0
//set the text entries to be centered
ORG $A2E3A
SHORT 0x2001
ORG $127380
BYTE 1
ORG $127388
BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 2 2 0 0; SHORT 0x0B4 0x11A 0 0
BYTE 2 2 0 0; SHORT 0x0B4 0x112 0 0
BYTE 2 2 0 0; SHORT 0x0B4 0x11B 0 0
BYTE 2 2 0 0; SHORT 0x0B4 0x11C 0 0
BYTE 2 2 0 0; SHORT 0x0B4 0x109 0 0
BYTE 0 0 0 0; SHORT 0x001 0x000 0 0 //BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 0 0 0 0; SHORT 0x001 0x000 0 0 //BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 0 0 0 0; SHORT 0x001 0x000 0 0 //BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 0 0 0 0; SHORT 0x001 0x000 0 0 //BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 0 0 0 0; SHORT 0x001 0x000 0 0 //BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 0 0 0 0; SHORT 0x001 0x000 0 0 //BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 0 0 0 0; SHORT 0x001 0x000 0 0 //BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 0 0 0 0; SHORT 0x001 0x000 0 0 //BYTE 2 2 0 0; SHORT 0x0B4 0x119 0 0
BYTE 6 0 0 0; SHORT 0x03C 0x000 0 0
BYTE 2 2 0 0; SHORT 0x12C 0x118 0 0
BYTE 0 0 0 0; SHORT 0x0B4 0x000 0 0
BYTE 7 0 0 0; SHORT 0x03C 0x000 0 0
POP

//repoint some stuff to get more credits entries
PUSH; ORG $A2F74; POIN repointedCredits1; POP
ALIGN 4
repointedCredits1:
BYTE 0xAB 0x40 0xAC 0x41 0xAD 0x42 0xAE 0x43 0xAF 0x44 0xB0 0x45 0xB1 0x46 0xB2 0x47 0xB3 0x48 0x00 0x00
PUSH; ORG $A2E18; POIN repointedCredits2; POP
ALIGN 4
repointedCredits2:
POIN $A2E21 $A2ED9 $A31AD $A3199
PUSH; ORG $A2EEC; POIN repointedCredits3; POP
repointedCredits3:
POIN $A2EF5 $A2F11 $A2F81 $A307D $A30A1 $A30CD $A30E9 $A3149

//repoint text IDs in all languages
PUSH
ORG $5E95A
SHORT 0
ORG $9F789C
WORD credits1-$9F7838
WORD credits2-$9F7838
WORD credits3-$9F7838
WORD credits4-$9F7838
ORG $9F785C
WORD credits5-$9F7838
ORG $9F7880
WORD credits6-$9F7838
POP

credits1:
BYTE 0x0A
BYTE 2 0x01; String("Programming"); BYTE 2 0 0x0A
String("Berylliosis     Ibot"); BYTE 0x0A
String("Henny        Dreamie"); BYTE 0x0A
BYTE 0x0A
BYTE 2 0x02; String("Logic"); BYTE 2 0 0x0A
String("wjg      Berylliosis"); BYTE 0x0A
String("Myth197     Catobat"); BYTE 0x0A
String("Deoxis"); BYTE 0


credits2:
BYTE 0x0A
BYTE 2 0x03; String("Patches and Assembly"); BYTE 2 0 0x0A
String("Leonarth     Catobat"); BYTE 0x0A
String("Henny          Dreamie"); BYTE 0x0A
BYTE 0x0A
BYTE 2 0x01; String("Tracker Package"); BYTE 2 0 0x0A
String("Ibot      Cubesolver"); BYTE 0x0A
String("Deoxis        Myth197"); BYTE 0x0A
String("Aero   CandyCrystal"); BYTE 0

credits3:
BYTE 0x0A
BYTE 2 0x11; String("Team MinishMaker"); BYTE 2 0 0x0A
String("Mikesky           ppltoast"); BYTE 0x0A
String("ToadsWoot              wjg"); BYTE 0x0A
String("Berylliosis       Leonarth"); BYTE 0x0A
String("UselessHobo   Cubesolver"); BYTE 0x0A
String("Ibot               Straylite"); BYTE 0x0A
String("Myth197               Henny"); BYTE 0x0A
String("Dreamie            Catobat"); BYTE 0

credits4:
BYTE 2 0x1A; String("Additional Contributors"); BYTE 2 0 0x0A
String("Rylux                TreZc0"); BYTE 0x0A
String("vortexofdoom     wolfman"); BYTE 0x0A
String("Maro"); BYTE 0x0A
BYTE 2 0x12; String("Special Thanks"); BYTE 2 0 0x0A
String("ALTTP Randomizer Team"); BYTE 0x0A
String("EmoTracker Developers"); BYTE 0x0A
String("ZeldaRET Decomp Project"); BYTE 0x0A
String("ZeldaSpeedruns.com Staff"); BYTE 0

credits5:
BYTE 2 0x03; String("Tournament Champions"); BYTE 2 0 0x0A
String("Season 1:     Pikapals"); BYTE 0x0A
String("Season 2:     LunaStik"); BYTE 0x0A
String("Season 3:       NesmaN"); BYTE 0x0A
String("Season 4:      Myth197"); BYTE 0x0A
String("2024 Francophone:       Daltior           "); BYTE 0x0A
BYTE 0x0A
BYTE 2 0x1B; String("minishmaker.com"); BYTE 0x0F 0x15; String("discord"); BYTE 2 0 0x0A
BYTE 0x0A
BYTE 2 0x1B; String("github.com"); BYTE 0x0F 0x15; String("minishmaker"); BYTE 2 0 0

credits6:
BYTE 0x0A
BYTE 0x0A
BYTE 0x0A
BYTE 2 0x01; String("Translators"); BYTE 2 0 0x0A
String("Deoxis and Legrandgrand (French)"); BYTE 0x0A
String("atxMartin and ToadsWoot (German)"); BYTE 0x0A
String("Leonarth (Spanish)"); BYTE 0x0A
String("Mikonai (Italian)"); BYTE 0

ALIGN 4
debugFontCredits:
#incbin "font.img.bin"
